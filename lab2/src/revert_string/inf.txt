Cтатическая библиотека:
1)Сначала мы создаем объектные файлы.
Объектные файлы для разделяемой библиотеки должны быть скомпилированы с флагом -fPIC (PIC = код, независимый от позиции).
Объектные файлы для статической библиотеки не нуждаются в этом флаге.

gcc main.c revert_string.c -I. -o revert_string.out 
gcc revert_string.c -c -o revert_string.o

2)Создаем статическую библиотеку.
Статическая библиотека - это набор объектных файлов, которые были скопированы в один файл с суффиксом .a.
Статический файл создается с помощью архиватора (ar).

ar rcs ./libRS.a ./revert_string.o 

(   r	Вставляет файлы в архив (с замещением)
    c	Создать архив 
    s	Записывает индекс объектного файла в архив или, если он существует, 
обновляет его, даже если нет других изменений в архиве  )

3)Со статической библиотекой мы можем статически связать main.o с библиотекой.
Флаг -L указывает (нестандартный) каталог, в котором можно найти библиотеки.
Флаг -l указывает название библиотеки.
Линкуем: 
gcc main.c -I. -L./ -lRS -o rs_static.out

Динамическая библиотека:
1) Создаем объектные файлы

gcc -fPIC -c revert_string.c -o revert_string.o

2) Создаем общую библиотеку

gcc -shared revert_string.o -o libRSD.so

3) Линкуем:

gcc main.c -L./ -lRSD -o rs_dynamic.out

4) Используем совместно используемую библиотеку с LD_LIBRARY_PATH
Пока разделяемая библиотека не установлена ​​в месте по умолчанию (например, / usr / lib),
 мы должны указать, где она находится. Это возможно с помощью переменной среды LD_LIBRARY_PATH.

 LD_LIBRARY_PATH=$(pwd)     
 Проверить путь : echo $LD_LIBRARY_PATH
                  
Очистка:
rm libRS.a
rm libRSD.so
rm revert_string.out
rm rs_dynamic.out
rm rs_static.out